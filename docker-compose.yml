version: '3'
services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: on-failure
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=jwilder/nginx-proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./proxy:/etc/nginx/vhost.d
      - ./proxy:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs:ro
    networks: 
      - allconnect

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: on-failure
    depends_on:
      - nginx-proxy
    volumes:
      - ./proxy:/etc/nginx/vhost.d
      - ./proxy:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/nginx/certs:rw
    networks: 
      - allconnect
    environment:
      NGINX_PROXY_CONTAINER: rg-proxy

  php:
    build: ./php
    volumes:
      - www-data:/var/www
    depends_on:
      - db
    links:
      - db
    networks: 
      - allconnect

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - 8080:8080
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - www-data:/var/www
    depends_on:
      - php
    links:
      - php
    environment:
      VIRTUAL_HOST: db.example.com
      # VIRTUAL_HOST: db.localhost
      LETSENCRYPT_HOST: db.example.com
      LETSENCRYPT_EMAIL: kohki.shikata@gmail.com
    networks: 
      - allconnect

  node:
    build: ./node
    image: node:12
    tty: true
    volumes:
      - ./node/app:/app
    ports:
      - 8081:3000
    environment:
      VIRTUAL_HOST: app.example.com
      # VIRTUAL_HOST: app.localhost
      LETSENCRYPT_HOST: app.example.com
      LETSENCRYPT_EMAIL: admin@example.com
    networks: 
      - allconnect

  static:
    image: nginx:latest
    ports:
      - 8082:8080
    volumes:
      - ./static/:/usr/share/nginx/html
    environment:
      VIRTUAL_HOST: dashboard.example.com
      # VIRTUAL_HOST: dashboard.localhost
      LETSENCRYPT_HOST: dashboard.example.com
      LETSENCRYPT_EMAIL: kohki.shikata@gmail.com
    networks: 
      - allconnect

  db:
    image: mysql:5.7
    ports:  
      - 13306:3306
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: exment_database
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_USER: exment_user
      MYSQL_PASSWORD: secret
    networks:
      - allconnect

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    ports:
      - 8888:80
    depends_on:
      - db
    links:
      - db
    networks: 
      - allconnect
    environment:
      PMA_HOST: db
      UPLOAD_LIMIT: 300000000000000
# volumes を定義する
volumes:
  # volume の名前を指定
  # Exmentのインストールパス
  www-data:
    # Compose の外ですでに作成済みの volume を指定する場合は ture を設定する。
    # そうすると、 docker-compose up 時に Compose は volume を作成しようとしません。
    # かつ、指定した volume が存在しないとエラーを raise します。
    #external: trues
  # mysql dbのインストールパス
  mysql-data:
  proxy:
  app:

networks:
  allconnect:
    driver: bridge
